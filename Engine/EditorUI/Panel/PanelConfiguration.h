#ifndef _PANELCONFIGURATION_H_
#define _PANELCONFIGURATION_H_

#include "Panel.h"
#include "Module/ModuleInput.h"
#include <vector>
#include <set>


class PanelConfiguration : public Panel
{
public:
	PanelConfiguration();
	~PanelConfiguration() = default;

	void Render() override;

private:
	void ShowHardware() const;

	void ShowWindowOptions();
	void ShowRenderOptions();
	void ShowTimeOptions();
	void ShowInputOptions();
	void ShowPhysicsOptions();
	void ShowSpacePartitioningOptions();

	std::vector<const char*> game_inputs_strings
	{
	"A",
	"B",
	"C",
	"D",
	"E",
	"F",
	"G",
	"H",
	"I",
	"J",
	"K",
	"L",
	"M",
	"N",
	"O",
	"P",
	"Q",
	"R",
	"S",
	"T",
	"U",
	"V",
	"W",
	"X",
	"Y",
	"Z",
	"Alpha1",
	"Alpha2",
	"Alpha3",
	"Alpha4",
	"Alpha5",
	"Alpha6",
	"Alpha7",
	"Alpha8",
	"Alpha9",
	"Alpha0",
	"Return",
	"Escape",
	"BackSpace",
	"Tab",
	"Space",
	"Minus",
	"Equals",
	"LeftBracket",
	"RightBracket",
	"BackSlash",
	"Nonushash",
	"Semicolon",
	"Apostrophe",
	"Grave",
	"Comma",
	"Period",
	"Slash",
	"CapsLock",
	"F1",
	"F2",
	"F3",
	"F4",
	"F5",
	"F6",
	"F7",
	"F8",
	"F9",
	"F10",
	"F11",
	"F12",
	"PrintScreen",
	"ScrollLock",
	"Pause",
	"Insert",
	"Home",
	"PageUp",
	"Delete",
	"End",
	"PageDown",
	"RightArrow",
	"LeftArrow",
	"DownArrow",
	"UpArrow",
	"NumLockClear",
	"KeypadDivide",
	"KeypadMultiply",
	"KeypadMinus",
	"KeypadPlus",
	"KeypadEnter",
	"Keypad1",
	"Keypad2",
	"Keypad3",
	"Keypad4",
	"Keypad5",
	"Keypad6",
	"Keypad7",
	"Keypad8",
	"Keypad9",
	"Keypad0",
	"KeypadPeriod",
	"NonusBackSlash",
	"Aplication",
	"Power",
	"KeypadEquals",
	"F13",
	"F14",
	"F15",
	"F16",
	"F17",
	"F18",
	"F19",
	"F20",
	"F21",
	"F22",
	"F23",
	"F24",
	"Execute",
	"Help",
	"Menu",
	"Select",
	"Stop",
	"Again",
	"Undo",
	"Cut",
	"Copy",
	"Paste",
	"Find",
	"Mute",
	"VolumeUp",
	"VolumeDown",
	"LockingCapsLock",
	"LockingNumLock",
	"LockingScrollLock",
	"KeypadComma",
	"EqualsAs400",
	"International1",
	"International2",
	"International3",
	"International4",
	"International5",
	"International6",
	"International7",
	"International8",
	"International9",
	"Lang1",
	"Lang2",
	"Lang3",
	"Lang4",
	"Lang5",
	"Lang6",
	"Lang7",
	"Lang8",
	"Lang9",
	"AltErase",
	"SysReq",
	"Cancel",
	"Clear",
	"Prior",
	"Return2",
	"Separator",
	"Quit",
	"Oper",
	"ClearAgain",
	"Crsel",
	"Exsel",
	"Keypad00",
	"Keypad000",
	"ThousandsSeparator",
	"DecimalSeparator",
	"CurrencyUnit",
	"CurrencySubUnit",
	"KeypadLeftParen",
	"KeypadRightParen",
	"KeypadLeftBrace",
	"KeypadaRightBrace",
	"KeypadTab",
	"KeypadBackspace",
	"KeypadA",
	"KeypadB",
	"KeypadC",
	"KeypadD",
	"KeypadE",
	"KeypadF",
	"KeypadXor",
	"KeypadPower",
	"KeypadPercent",
	"KeypadLess",
	"KeypadGreater",
	"KeypadAmpersand",
	"KeypadDbLampersand",
	"KeypadVerticalBar",
	"KeypadDbVerticalBar",
	"KeypadColon",
	"KeypadHash",
	"KeypadSpace",
	"KeypadAt",
	"KeypadExclam",
	"KeypadMemStore",
	"KeypadMemRecall",
	"KeypadMemClear",
	"KeypadMemAdd",
	"KeypadMemSubtract",
	"KeypadMemMultiply",
	"KeypadMemDivide",
	"KeypadPlusMinus",
	"KeypadClear",
	"KeypadClearEntry",
	"KeypadBinary",
	"KeypadOctal",
	"KeypadDecimal",
	"KeypadHexadecimal",
	"LeftControl",
	"LeftShift",
	"LeftAlt",
	"LeftCommand",
	"RightControl",
	"RightShift",
	"RightAlt",
	"RightCommand",
	"Mode",
	"AudioNext",
	"AudioPrev",
	"AudioStop",
	"AudioPlay",
	"AudioMute",
	"MediaSelect",
	"Www",
	"Mail",
	"Calculator",
	"Computer",
	"AcSearch",
	"AcHome",
	"AcBack",
	"AcForward",
	"AcStop",
	"AcRefresh",
	"AcBookmarks",
	"BrightnessDown",
	"BrightnessUp",
	"DisplaySwitch",
	"IllumToggle",
	"IllumDown",
	"IllumUp",
	"Eject",
	"Sleep",
	"App1",
	"App2",
	"AudioRewind",
	"AudioFastForward" 
	};

	std::vector<const char*> mouse_keys_string 
	{
		"Left",
		"Middle",
		"Right"
	};

	std::vector<const char*> controller_keys_string
	{
		"A" ,
		"B" ,
		"X" ,
		"Y" ,
		"Back" ,
		"Guide" ,
		"Start" ,
		"LeftStick" ,
		"RightStick" ,
		"LeftShoulder" ,
		"RightShoulder" ,
		"UpDpad" ,
		"DownDpad" ,
		"LeftDpad" ,
		"RightDpad" 
	};

	std::set<int> string_keys;
	std::set<int> keys;
	std::set<int> mouse_keys;
	std::set<int> controller_keys;
	KeyCode selected_key = KeyCode::None;
	unsigned int selected_combo = 0;
	MouseButton selected_mouse = MouseButton::Left;
	ControllerCode selected_controller = ControllerCode::A;
	std::string name_game_input = "";

	const int FIRST_OFFSET_COND = 164;
	const int SECOND_OFFSET_COND = 221;
	const int THIRD_OFFSET_COND = 231;	
	const int FIRST_OFFSET = 15;
	const int SECOND_OFFSET = 17;
	const int THIRD_OFFSET = 42;
};

#endif //_PANELCONFIGURATION_H_